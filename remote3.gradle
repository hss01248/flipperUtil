

rootProject.buildscript {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.10'
        classpath 'io.github.didi.dokit:dokitx-plugin:3.5.0.1'
        //classpath 'com.didichuxing.doraemonkit:doraemonkit-plugin:3.1.8'
    }
}


def isRelease(){
    for (String s : gradle.startParameter.taskNames) {
        if (s.contains("ultiChannel") | s.contains("elease")) {
            return true
        }
    }
    return false
}

def hasApplyAspectjx(Project project0){
    return project0.plugins.findPlugin("com.hujiang.android-aspectjx") != null || project0.plugins.findPlugin("android-aspectjx") != null
}

def isLocal(){

    for(Project p : subprojects){
        if( p.getName().contains("flipper")){
            return true;
        }
    }
    return false;
}

def doUseAspectjx(){
    try {
        return flipper_use_aspectjx.toBoolean()
    }catch(Throwable throwable){
        throwable.printStackTrace()
        return false;
    }
    /*if( gradle.hasProperty("flipper_use_aspectjx")){
        println("<--------has prop:flipper_use_aspectjx:"+gradle.getProperties().get("flipper_use_aspectjx"))
        return gradle.getProperties().get("flipper_use_aspectjx").toBoolean();
    }
    println("<--------dont have prop flipper_use_aspectjx");
    return false;*/
}
//println("<--------flipper_use_aspectjx 直接取 :"+doUseAspectjx());
//println("<--------flipper_use_aspectjx 从gradle.getProperties()里取:"+gradle.getProperties().get("flipper_use_aspectjx"));
def flipper
def flippernoop
def dokit
if(isLocal()){
    dokit = project(':dokit')
    flipper = project(':flipper')
    flippernoop = project(':flipper-no-op')

}else {
    flipper = 'com.github.hss01248.flipperUtil:flipper:1.2.9'
    dokit = 'com.github.hss01248.flipperUtil:dokit:1.2.9'
    flippernoop = 'com.github.hss01248.flipperUtil:flipper-no-op:1.2.9'
}

gradle.addBuildListener(new BuildListener() {
    @Override
    void buildStarted(Gradle gradle) {

    }

    @Override
    void settingsEvaluated(Settings settings) {
        println("---->settingsEvaluated:"+settings)
    }

    @Override
    void projectsLoaded(Gradle gradle) {
        println("---->projectsLoaded:"+gradle)
    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        println("---->projectsEvaluated:"+gradle)
    }

    @Override
    void buildFinished(BuildResult buildResult) {

    }
})


gradle.addProjectEvaluationListener(new ProjectEvaluationListener() {
    @Override
    void beforeEvaluate(Project project) {
        println("---->beforeEvaluate:"+project)
        //println("---->beforeEvaluate:"+project.plugins)
        /*if(project.name.contains("app") || project.name.contains("demo")
                || project.name.contains("Demo") || project.name.contains("sample")
                || project.name.contains("Sample")){
        }*/

       /* if(mybeApp(project.displayName)){
            project.dependencies {
                if(!isRelease()){
                    project.dependencies {
                        implementation flipper
                    }
                }else {
                    project.dependencies {
                        implementation flippernoop
                    }
                }
            }
        }*/

    }

    @Override
    void afterEvaluate(Project project, ProjectState projectState) {
        println("---->afterEvaluate:"+project)
        //todo 遗留问题 如果app工程本身apply了 aspectjx插件,那么因为这里的implementation flipper在工程的apply plugin aspectjx之后,
        // 那么里面的okhttp切面无法被插件切入到,必须是在apply 插件之前.
        // 可以选择自己添加依赖到工程的dependencies块里
        if(project.plugins.findPlugin("com.android.application") != null){
            project.repositories {
                maven { url 'https://jitpack.io' }
                mavenCentral()
                google()
                jcenter()
            }
            gradle.addListener(new CollectTaskTimeListener())
            println("---->gradle.addListener(new CollectTaskTimeListener()):"+project)
            if(!isRelease()){
                //添加自定义的监听
                project.dependencies {
                    //implementation('com.github.hss01248:ActivityTaskView:5.0.1')
                    implementation flipper
                    implementation dokit
                    implementation "com.github.simplepeng.SpiderMan:spiderman:v1.1.8"
                    implementation 'com.facebook.flipper:flipper:0.105.0'
                }
            }else {
                project.dependencies {
                    implementation flippernoop
                }
            }

            //UnsatisfiedLinkError: couldn't find DSO to load: libfbjni.so
            //todo 判断: 如果(RN)工程本来有依赖 group: 'com.facebook.fbjni', module: 'fbjni-java-only',那么就排除module: 'fbjni'
            //all*.exclude group: 'com.facebook.fbjni', module: 'fbjni'
            //all*.exclude group: 'com.facebook.fbjni', module: 'fbjni-java-only'

            println("---->isLocal():"+isLocal())


            //

            //一些中型工程项目使用aspctjx就很慢了,建议项目里使用自己的include
            if (!isRelease() && !hasApplyAspectjx(project) ){
                println("apply plugin: 'com.hujiang.android-aspectjx' by hss01248/flipperUtil, add flipper networkinterceptor to okhttpclient automatically")
                project.apply plugin: 'com.hujiang.android-aspectjx'
//为加快编译速度,需要自己将扫描的包路径添加到include里.  性能差距: 4min vs 4s
                project.aspectjx {
//排除所有package路径中包含`android.support`的class文件及库（jar文件）:Invalid byte tag in constant pool
                    exclude 'com.google', 'com.taobao',  'module-info', 'com.squareup.haha', 'versions.9', 'com.tencent',
                            'androidx',
                            //'com.squareup',
                            'com.alipay',
                            'org.apache',
                            'com.alipay',
                            'cn.jiguang',
                            //'com.github',
                            'com.meizu',
                            'com.huawei',
                            'com.qiyukf',
                            'com.sina',
                            'io.reactivex',
                            //'de.greenrobot.event',
                            'com.netease.neliveplayer',
                            'com.umeng',
                            'im.yixin',
                            'com.commonsware',
                            'io.fabric',
                            'rx.android',
                            'com.android'
                    //不使用include时,项目一大就很慢,分钟级别,所以提供开关
                    include 'okhttp3','com.hss01248.flipper','androidx.lifecycle','org.greenrobot.eventbus','com.facebook.react','com.facebook.flipper.plugins.databases.impl',
                    'com.didichuxing.doraemonkit.aop'

                }
            }else {
                println("not apply aspectjx ,not add flipper networkinterceptor to okhttpclient automatically," +
                        "because isRelease or hasApplyAspectjx before or flipper_use_aspectjx is not true :\n " +
                        "isRelease:"+isRelease()+",hasApplyAspectjx:"+hasApplyAspectjx(project)+",flipper_use_aspectjx:"+doUseAspectjx())
                if(hasApplyAspectjx(project)){
                    println("to enable auto inject of aspectj to okhttpclientbulider to all libs,you should add implementation com.github.hss01248.flipperUtil:flipper:1.0.9 manually in depencies")
                }
            }

        }

    }
})

allprojects {
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }
}
def mybeApp(name){
    return name != null && ( name.contains("app") || name.contains("demo")
            || name.contains("Demo") || name.contains("ample") )
}

/*def mybeApp(name){
    return name != null && ( name.contains("app") || name.contains("demo")
            || name.contains("Demo") || name.contains("ample") )
}

rootProject.subprojects {
    println(project.plugins.findPlugin("com.android.application")+"---->"+project.displayName)
    if(mybeApp(project.displayName)){
        project.dependencies {
            if(!isRelease()){
                project.dependencies {
                    implementation flipper
                }
            }else {
                project.dependencies {
                    implementation flippernoop
                }
            }
        }
    }
}*/



class CollectTaskTimeListener implements TaskExecutionListener,BuildListener{
    private long mStartTime;
    private def timings = new HashMap<String, Long>() //存储所有task和其所发时间的对应关系
    private def final MIN_COST = 5

    @Override
    void buildStarted(Gradle gradle) {
    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {

    }

    @Override
    void buildFinished(BuildResult result) {
        //输出排序后的统计数据
        outputHeader("Task timings(sorted): ")
        outputProfile(sortProfileData(timings).iterator())
        println("\n")
        outputTotalTime(timings.iterator())
    }

    @Override
    void beforeExecute(Task task) {
        mStartTime =  System.currentTimeMillis();
    }

    @Override
    void afterExecute(Task task, TaskState state) {
        long ms = System.currentTimeMillis()-mStartTime;
        timings.put(task.path, ms)
        task.project.logger.warn "${task.path} took ${ms}ms"

    }

    void outputHeader(String headerMessage) {
        println("\n======================================================")
        println(headerMessage)
    }

    //输出收集的数据
    void outputProfile(Iterator<Map.Entry<String, Long>> it) {
        for (entry in it) {
            if (entry.value >= MIN_COST) {
                printf("%-50s  %-15s\n", entry.key, entry.value + "ms")
            }
        }
    }

    //对task所花费的时间进行排序
    List<Map<String, Long>> sortProfileData(Map<String, Long> profileData) {
        List<Map.Entry<String, Long>> data = new ArrayList<>()
        for (timing in profileData) data.add(timing)
        Collections.sort(data, new Comparator<Map.Entry<String, Long>>() {
            @Override
            int compare(Map.Entry<String, Long> o1, Map.Entry<String, Long> o2) {
                if (o1.value > o2.value) return -1
                else if (o1.value < o2.value) return 1
                return 0
            }
        })
        return data
    }

    void outputTotalTime(Iterator<Map.Entry<String, Long>> it){
        long totalTime
        for (entry in it) {
            totalTime += entry.value;
        }
        long minte = totalTime/1000/60;
        long second = totalTime/1000-minte*60;
        long milion = totalTime-second*1000-minte*60*1000;
        println("Total Tasks took ${minte}min ${second}s ${milion}ms")
    }
}

