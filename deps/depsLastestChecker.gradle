import okhttp3.Call
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response
import org.xml.sax.SAXException
import org.xml.sax.ext.DefaultHandler2

import javax.xml.parsers.SAXParser
import javax.xml.parsers.SAXParserFactory
import java.util.function.Consumer

//运行命令: ./gradlew checkLastestDependenciesRelease
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath "com.github.ben-manes:gradle-versions-plugin:0.36.0"
        classpath "com.squareup.okhttp3:okhttp:3.12.12"
    }
}



this.gradle.addBuildListener(new BuildListener() {
    @Override
    void buildStarted(Gradle gradle) {

    }

    @Override
    void settingsEvaluated(Settings settings) {

    }

    @Override
    void projectsLoaded(Gradle gradle) {

    }

    @Override
    void projectsEvaluated(Gradle gradle) {
        println("解析依赖: projectsEvaluated--->")
        //parseDeps()

    }

    @Override
    void buildFinished(BuildResult result) {

    }
})

this.gradle.addProjectEvaluationListener(new ProjectEvaluationListener() {
    @Override
    void beforeEvaluate(Project project) {

    }

    @Override
    void afterEvaluate(Project project, ProjectState state) {
        parseDeps(project)
    }
});

def parseDeps(Project project) {
    println("parseDeps--->" + project.name)
    if (!project.name.contains("app")) {
        return
    }
    project.apply plugin: "com.github.ben-manes.versions"
    project.dependencies {
        api "com.squareup.okhttp3:okhttp:3.12.12"
    }
    project.android.applicationVariants.all { variant ->
        println("parseDeps--->variant " + variant.name)
        //todo 运行命令: ./gradlew showDependenciesRelease
        tasks.create(name: "checkLastestDependencies${variant.name.capitalize()}",
                description: "展示所有依赖") {
            doLast {
                Configuration configuration = project.configurations."${variant.name}CompileClasspath"
                println("parseDeps configuration--->" + configuration)
                File file = new File(rootDir,"deps/${variant.name}/${variant.name}-deps.gradle");
                if(file.exists()){
                    //file.delete();
                }
                StringBuilder sb = new StringBuilder();
                StringBuilder sn = new StringBuilder();
                sb.append("//list all deps:\ndependencies {\n")

                sn.append("//versions contains SNAPSHOT:\ndependencies {\n")
                List<ModuleVersionIdentifier> deps = new ArrayList<>();
                //println("parseDeps allModuleDependencies--->"+configuration.resolvedConfiguration.lenientConfiguration.allModuleDependencies)
                configuration.resolvedConfiguration.lenientConfiguration.allModuleDependencies.each {
                    def identifier = it.module.id
                    deps.add(identifier)
                    //println("${identifier.group}:${identifier.name}:${identifier.version}")
                    println("implementation \"${identifier.group}:${identifier.name}:${identifier.version}\"")
                    //将依赖生成一个gradle文件
                    sb.append("     implementation \"${identifier.group}:${identifier.name}:${identifier.version}\"").append("\n")
                    if(identifier.version.contains("SNAPSHOT")){
                        sn.append("     implementation \"${identifier.group}:${identifier.name}:${identifier.version}\"").append("\n")
                    }
                    //todo 查询最新版本号:

                }
                Set<String> hosts = new HashSet<>()
                project.repositories.forEach(new Consumer<ArtifactRepository>() {
                    @Override
                    void accept(ArtifactRepository artifactRepository) {
                        def map = artifactRepository.properties
                        /*map.entrySet().forEach(new Consumer<Map.Entry>() {
                            @Override
                            void accept(Map.Entry entry) {
                                println(entry.getKey() + " : "+entry.getValue())
                            }
                        })*/
                        println("name:"+ map.get("name")+" , url: "+ map.get(("url")))
                        String url  = map.get("url")
                        if(url != null){
                            if( !url.endsWith("/")){
                                url = url +"/"

                            }
                            if(url.startsWith("file:")){
                                println("url is file:\n"+ map)
                            }else {
                                hosts.add(url)
                            }

                        }else {
                            println("url is null:\n"+ map)
                        }


                        //获取各种版本列表: https://jitpack.io/com/github/hss01248/DialogUtil/
                        //convention : org.gradle.internal.extensibility.DefaultConvention@6571c882
                        //authentication : []
                        //conventionMapping : org.gradle.internal.extensibility.ConventionAwareHelper@4c3614b0
                        //extensions : org.gradle.internal.extensibility.DefaultConvention@6571c882
                        //contentFilter : null
                        //descriptor : org.gradle.api.internal.artifacts.repositories.descriptor.MavenRepositoryDescriptor@34d72afc
                        //locallyAvailableResourceFinder : org.gradle.internal.resource.local.CompositeLocallyAvailableResourceFinder@cbcd24
                        //configuredAuthentication : []
                        //artifactFileStore : org.gradle.api.internal.filestore.DefaultArtifactIdentifierFileStore@45e247cc
                        //class : class org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository_Decorated
                        //asDynamicObject : DynamicObject for org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository_Decorated@4578b67d
                        //allowInsecureProtocol : false
                        //repositoryUrls : [https://dl.google.com/dl/android/maven2/]
                        //pomParser : gradle pom parser
                        //displayName : Google2
                        //credentials : Credentials [username: null]
                        //artifactUrls : []
                        //configuredCredentials : Credentials [username: null]
                        //url : https://dl.google.com/dl/android/maven2/
                        //metadataValidationServices : org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository$$Lambda$145/2026839531@7a45ea74
                        //name : Google2
                        //resourcesFileStore : org.gradle.internal.resource.cached.DefaultExternalResourceFileStore@6587b2e8
                        //metadataSources : org.gradle.api.internal.artifacts.repositories.DefaultMavenArtifactRepository$MavenMetadataSources@341cb945
                        //instantiatorFactory : org.gradle.internal.instantiation.generator.DefaultInstantiatorFactory@653624f2
                        //taskThatOwnsThisObject : null
                        //modelIdentityDisplayName : null
                        //authenticationSchemes : [Authentication]
                    }
                })
                sn.append("}\n\n")
                sb.append("}")
                String str = sn.toString()+sb.toString()
                //字符串写入到文件
                def osm = file.newOutputStream()
                osm.write(str.getBytes())
                osm.close()

                println("--->开始查询最新版本,30s后看结果")
               // CountDownLatch
                List<String> infos = new ArrayList<>(deps.size())
                List<String> versions = new ArrayList<>(deps.size())
                checkLastest(hosts,deps,infos,versions)
                //开始查询最新版本:
                Thread.sleep(30000)

                Collections.sort(infos)
                File file1 =  new File(rootDir,"deps/${variant.name}/${variant.name}-depsLastest.gradle");
                println("--->结束,写文件到: "+file1.absolutePath)
                String strs = Arrays.toString(infos.toArray()).replaceAll("\\,","\n")
                def osm1 = file1.newOutputStream()
                osm1.write(strs.getBytes())
                osm1.close()

            }
        }
    }


}


def checkLastest(hosts,deps,infos,versions){
    //可用的: https://repo.maven.apache.org/maven2/
    //https://jitpack.io/com/github/hss01248/ImageLoader/
    //https://jitpack.io/com/github/simplepeng/SpiderMan/spiderman/maven-metadata.xml
    //https://repo.maven.apache.org/maven2/org/aspectj/aspectjrt/maven-metadata.xml
    // https://jitpack.io/com/github/hss01248/metadata/metadata/maven-metadata.xml

    def okhttpclient = null
    Map<String,List<Call>> callMap = new HashMap()
    if(okhttpclient == null){
        okhttpclient = new OkHttpClient.Builder()
                .build()
    }
    SAXParserFactory factory = SAXParserFactory.newInstance();
    for (ModuleVersionIdentifier dep : deps){
        def  key = dep.group+":"+dep.name
        def list = new ArrayList();
        callMap.put(key,list)
        for(String host : hosts){
            def url = host+dep.group.replaceAll("\\.","/")+"/"+dep.name+"/maven-metadata.xml"
            //println("todo 并发访问: 检查最新版本: "+url)
            //MavenLocal2 , url: file:/Users/hss/.m2/repository/
            if(url.startsWith("file:")){
                continue
            }
            def request = new Request.Builder().url(url).get().build()
            def realCall =  okhttpclient.newCall(request)
            callMap.get(key).add(realCall)

            final finalKey = key
            final finalDep = dep
            final finalUrl = url
            //unable to create new native thread
            new Thread(new Runnable() {
                @Override
                void run() {
                    //println("--------->异步执行:"+Thread.currentThread().name+", "+ finalKey+",请求url: "+finalUrl)

                    try {
                        //println("只能单线程请求执行,无法并发执行:"+Thread.currentThread().name)
                        Response response =  realCall.execute()
                        if(response.isSuccessful()){
                            //println("请求成功,继续其他:"+realCall.request().url())
                            //println("todo 解析最新版本,对比,输出报告")


                            String str = response.body().string();
                            SAXParser parser = factory.newSAXParser();
                            String v = ""
                            //<versions>
                            //<version>4.2.1</version>
                            //</versions>
                            parser.parse(new ByteArrayInputStream(str.getBytes('UTF-8')),new DefaultHandler2(){
                                def isVersion = false

                                @Override
                                void startElement(String uri, String localName, String elementName, org.xml.sax.Attributes attributes) throws SAXException {
                                    super.startElement(uri, localName, elementName, attributes)
                                    if("version".equals(elementName)){
                                        isVersion = true
                                        //println("startElement:"+elementName+","+localName);
                                    }

                                }

                                @Override
                                void endElement(String uri, String localName, String elementName) throws SAXException {
                                    super.endElement(uri, localName, elementName)
                                    if("version".equals(elementName)){
                                        isVersion = false
                                        //println("endElement:"+elementName+","+localName);
                                    }

                                }

                                @Override
                                void characters(char[] ac, int i, int j) throws SAXException {
                                    def tmpValue = new String(ac, i, j);
                                    if(isVersion){
                                        v = tmpValue
                                        //println("characters:"+tmpValue);
                                    }

                                }
                            })
                            List<Call> list1 = callMap.get(finalKey)
                            for(Call call2 : list1){
                                try {
                                    call2.cancel()
                                }catch(Throwable throwable){

                                }
                            }
                            if(!finalDep.version.equals(v)){
                                boolean  show = true
                                /*if(!dep.version.contains("alpha") && !dep.version.contains("rc")){
                                    if(v.contains("alpha") && v.contains("rc")){
                                        show = false
                                    }
                                }*/
                                if(show){
                                    synchronized (String.class){
                                        String desc2 = finalDep.group+":"+finalDep.name+":"+finalDep.version
                                        String desc = finalDep.group+":"+finalDep.name+":"+finalDep.version+" --> "+v+" "+finalUrl
                                        if(versions.indexOf(desc2) <0){
                                            println("-----> 有新版本: "+ desc)
                                            infos.add(desc)
                                            versions.add(desc2)
                                        }
                                    }
                                }
                            }
                        }else {
                            //println("请求失败: "+response.code()+", "+realCall.request().url())
                        }
                        response.close()
                    }catch(Throwable throwable){
                        if(!"Socket closed".equals(throwable.message)
                                && !"Canceled".equals(throwable.message)
                        && !"Connection reset".equals(throwable.message)){
                            println("请求失败2:"+throwable.message+", "+finalUrl)
                        }

                    }

                }
            }).start()

            //无法开子线程
            /*realCall.enqueue(new Callback() {
                @Override
                void onFailure(Call call, IOException e) {
                    println("failed:"+e.message+", "+call.request().url())
                }

                @Override
                void onResponse(Call call, Response response) throws IOException {
                    if(response.isSuccessful()){
                        println("请求成功,移除其他:"+call.request().url())
                        //println("响应")
                        List<Call> list1 = callMap.get(key)
                        for(Call call2 : list1){
                            call2.cancel()
                        }
                    }else {
                        println("请求失败: "+response.code()+", "+call.request().url())
                    }
                }
            })*/
        }
    }

}

